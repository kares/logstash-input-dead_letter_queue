import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING


group 'co.elastic.logstash.input'

apply plugin: 'java'
apply plugin: 'idea'

version "${new File("VERSION").text.trim()}"

description = "dead letter queue"

repositories {
    mavenCentral()
}

project.sourceCompatibility = 1.8
project.targetCompatibility = 1.8

String log4jVersion = '2.17.1'

task generateGemJarRequiresFile {
    doLast {
        File jars_file = file('lib/logstash-input-dead_letter_queue_jars.rb')
        jars_file.newWriter().withWriter { w ->
            w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
            w << "require \'jar_dependencies\'\n"
            configurations.runtime.allDependencies.each {
                w << "require_jar(\'${it.group}\', \'${it.name}\', \'${it.version}\')\n"
            }
            w << "require_jar(\'${project.group}\', \'${project.name}\', \'${project.version}\')\n"
        }
    }
}

task vendor {
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        configurations.runtime.allDependencies.each { dep ->
            File f = configurations.runtime.filter { it.absolutePath.contains("${dep.group}/${dep.name}/${dep.version}") }.singleFile
            String groupPath = dep.group.replaceAll('\\.', '/')
            File newJarFile = file("${vendorPathPrefix}/${groupPath}/${dep.name}/${dep.version}/${dep.name}-${dep.version}.jar")
            newJarFile.mkdirs()
            Files.copy(f.toPath(), newJarFile.toPath(), REPLACE_EXISTING)
        }
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
    }
}

vendor.dependsOn(jar, generateGemJarRequiresFile)


configurations {
    provided
}
project.sourceSets {
    main.compileClasspath += project.configurations.provided
    main.runtimeClasspath += project.configurations.provided
    test.compileClasspath += project.configurations.provided
    test.runtimeClasspath += project.configurations.provided
}
project.javadoc.classpath += project.configurations.provided

idea {
    module {
        scopes.PROVIDED.plus += [project.configurations.provided]
    }
}

dependencies {
  compileOnly group: "org.apache.logging.log4j", name: "log4j-api", version: "${log4jVersion}"
  compileOnly fileTree(dir: logstashCoreGemPath, include: '**/logstash-core.jar')

  testCompile group: 'junit', name: 'junit', version: '4.12'
  testImplementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
  testCompile fileTree(dir: logstashCoreGemPath, include: '**/*.jar')
}
